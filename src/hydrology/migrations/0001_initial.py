# Generated by Django 2.1.4 on 2019-03-12 10:52

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AirTemperature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observation_datetime', models.DateTimeField()),
                ('entry_datetime', models.DateTimeField()),
                ('air_temperature', models.DecimalField(decimal_places=2, max_digits=5)),
            ],
            options={
                'db_table': 'air_temperature',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observation_datetime', models.DateTimeField()),
                ('entry_datetime', models.DateTimeField()),
                ('comment', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'comment',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observation_datetime', models.DateTimeField()),
                ('entry_datetime', models.DateTimeField()),
                ('condition', models.CharField(choices=[('Сало', 'Сало'), ('Снежура', 'Снежура'), ('Забереги (первичные; наносные); припай шириной менее 100 м - для озер,водохранилищ', 'Забереги (первичные; наносные); припай шириной менее 100 м - для озер,водохранилищ'), ('Припай шириной более 100 м - для озер, водохранилищ', 'Припай шириной более 100 м - для озер, водохранилищ'), ('Забереги нависшие', 'Забереги нависшие'), ('*Ледоход; для озер, водохранилищ - дрейф льда; снегоход - для пересыхающих рек', '*Ледоход; для озер, водохранилищ - дрейф льда; снегоход - для пересыхающих рек'), ('*Ледоход, лед из притока, озера, водохранилища', '*Ледоход, лед из притока, озера, водохранилища'), ('*Ледоход поверх ледяного покрова', '*Ледоход поверх ледяного покрова'), ('*Шугоход', '*Шугоход'), ('Внутриводный лед (донный; глубинный)', 'Внутриводный лед (донный; глубинный)'), ('Пятры', 'Пятры'), ('Осевший лед (на береговой отмели после понижения уровня)', 'Осевший лед (на береговой отмели после понижения уровня)'), ('Навалы льда на берегах (ледяные валы)', 'Навалы льда на берегах (ледяные валы)'), ('Ледяная перемычка в створе поста', 'Ледяная перемычка в створе поста'), ('Ледяная перемычка выше поста', 'Ледяная перемычка выше поста'), ('Ледяная перемычка ниже поста', 'Ледяная перемычка ниже поста'), ('Затор льда выше поста', 'Затор льда выше поста'), ('Затор льда ниже поста', 'Затор льда ниже поста'), ('Затор льда искусственно разрушается', 'Затор льда искусственно разрушается'), ('Зажор льда выше поста', 'Зажор льда выше поста'), ('Зажор льда ниже поста', 'Зажор льда ниже поста'), ('Зажор льда искусственно разрушается', 'Зажор льда искусственно разрушается'), ('Вода на льду', 'Вода на льду'), ('Вода течет поверх льда (после промерзания реки; при наличии воды подо льдом)', 'Вода течет поверх льда (после промерзания реки; при наличии воды подо льдом)'), ('*Закраины', '*Закраины'), ('Лед потемнел', 'Лед потемнел'), ('Снежница', 'Снежница'), ('Лед подняло (вспучило)', 'Лед подняло (вспучило)'), ('Подвижка льда', 'Подвижка льда'), ('Разводья', 'Разводья'), ('Лед тает на месте', 'Лед тает на месте'), ('*Забереги остаточные', '*Забереги остаточные'), ('Наслуд', 'Наслуд'), ('*Битый лед - для озер, водохранилищ, устьевых участков рек', '*Битый лед - для озер, водохранилищ, устьевых участков рек'), ('*Блинчатый лед - для озер, водохранилищ, устьевых участков рек', '*Блинчатый лед - для озер, водохранилищ, устьевых участков рек'), ('*Ледяные поля - для озер, водохранилищ, устьевых участков рек', '*Ледяные поля - для озер, водохранилищ, устьевых участков рек'), ('*Ледяная каша - для озер, водохранилищ, устьевых участков рек', '*Ледяная каша - для озер, водохранилищ, устьевых участков рек'), ('Стамуха', 'Стамуха'), ('Лед относит (отнесло) от берега - для озер, водохранилищ', 'Лед относит (отнесло) от берега - для озер, водохранилищ'), ('Лед прижимает (прижало) к берегу - для озер, водохранилищ', 'Лед прижимает (прижало) к берегу - для озер, водохранилищ'), ('*Ледостав неполный', '*Ледостав неполный'), ('*Ледяной покров с полыньями (промоинами, пропаринами)', '*Ледяной покров с полыньями (промоинами, пропаринами)'), ('Ледостав, ровный ледяной покров', 'Ледостав, ровный ледяной покров'), ('Ледостав, ледяной покров с торосами', 'Ледостав, ледяной покров с торосами'), ('Ледяной покров с грядами торосов - для водохранилищ', 'Ледяной покров с грядами торосов - для водохранилищ'), ('Шуговая дорожка', 'Шуговая дорожка'), ('Подо льдом шуга', 'Подо льдом шуга'), ('Трещины в ледяном покрове', 'Трещины в ледяном покрове'), ('Наледь', 'Наледь'), ('Лед нависший (ледяной мост)', 'Лед нависший (ледяной мост)'), ('Лед ярусный (ледяной покров состоит из отдельных слоев,между которыми находится вода или воздушная п', 'Лед ярусный (ледяной покров состоит из отдельных слоев,между которыми находится вода или воздушная п'), ('Лед на дне (осевший или вследствие предшествующего промерзания реки)', 'Лед на дне (осевший или вследствие предшествующего промерзания реки)'), ('Река (озеро) промерзла', 'Река (озеро) промерзла'), ('Лед искусственно разрушен (ледоколом, взрыванием и др.техническими средствами', 'Лед искусственно разрушен (ледоколом, взрыванием и др.техническими средствами'), ('Наледная вода', 'Наледная вода'), ('Чисто', 'Чисто'), ('*Лесосплав', '*Лесосплав'), ('Залом леса выше поста', 'Залом леса выше поста'), ('Залом леса ниже поста', 'Залом леса ниже поста'), ('*Растительность у берега', '*Растительность у берега'), ('*Растительность по всему сечению потока', '*Растительность по всему сечению потока'), ('*Растительность по сечению потока пятнами', '*Растительность по сечению потока пятнами'), ('Растительность стелется по дну', 'Растительность стелется по дну'), ('Растительность на гидростворе выкошена', 'Растительность на гидростворе выкошена'), ('Растительность легла на дно (осенью)', 'Растительность легла на дно (осенью)'), ('Растительность занесена илом (во время спуска рыбных прудов и т.д.).', 'Растительность занесена илом (во время спуска рыбных прудов и т.д.).'), ('Растительность погибла в результате загрязнения реки', 'Растительность погибла в результате загрязнения реки'), ('Обвал (оползень) берега в створе поста', 'Обвал (оползень) берега в створе поста'), ('Обвал (оползень) берега выше поста', 'Обвал (оползень) берега выше поста'), ('Обвал (оползень) берега ниже поста', 'Обвал (оползень) берега ниже поста'), ('Дноуглубительные работы в русле', 'Дноуглубительные работы в русле'), ('Намывные работы в русле', 'Намывные работы в русле'), ('Проведена расчистка русла', 'Проведена расчистка русла'), ('Русло реки сужено на гидростворе для измерения расхода воды', 'Русло реки сужено на гидростворе для измерения расхода воды'), ('Образовалась коса', 'Образовалась коса'), ('Коса', 'Коса'), ('Образовался осередок', 'Образовался осередок'), ('Осередок', 'Осередок'), ('Образовался остров', 'Образовался остров'), ('Остров', 'Остров'), ('Смещение русла в плане', 'Смещение русла в плане'), ('Снежный завал в створе поста', 'Снежный завал в створе поста'), ('Снежный завал выше поста', 'Снежный завал выше поста'), ('Снежный завал ниже поста', 'Снежный завал ниже поста'), ('Прорыв снежного завала', 'Прорыв снежного завала'), ('Прохождение селя', 'Прохождение селя'), ('Течение реки изменилось на противоположное', 'Течение реки изменилось на противоположное'), ('Сгон воды - для устьевых участков рек, озер, водохранилищ', 'Сгон воды - для устьевых участков рек, озер, водохранилищ'), ('Нагон воды - для устьевых участков рек, озер, водохранилищ', 'Нагон воды - для устьевых участков рек, озер, водохранилищ'), ('Река пересохла', 'Река пересохла'), ('Волнение слабое, 1 балл - для больших рек, озер, водохранилищ', 'Волнение слабое, 1 балл - для больших рек, озер, водохранилищ'), ('Волнение умеренное, 2-3 балла - для больших рек, озер, водохранилищ', 'Волнение умеренное, 2-3 балла - для больших рек, озер, водохранилищ'), ('Волнение сильное, более 4 баллов - для больших рек, озер, водохранилищ', 'Волнение сильное, более 4 баллов - для больших рек, озер, водохранилищ'), ('Стоячая вода (перемерз или пересох расположенный выше или ниже перекат)', 'Стоячая вода (перемерз или пересох расположенный выше или ниже перекат)'), ('Стоячая вода подо льдом', 'Стоячая вода подо льдом'), ('Прекратилась лодочная переправа', 'Прекратилась лодочная переправа'), ('Прекратилось пешее сообщение', 'Прекратилось пешее сообщение'), ('Началось пешее сообщение', 'Началось пешее сообщение'), ('Началось движение транспорта по льду', 'Началось движение транспорта по льду'), ('Прекратилось движение транспорта по льду', 'Прекратилось движение транспорта по льду'), ('Началась лодочная переправа', 'Началась лодочная переправа'), ('Подпор от озера, реки', 'Подпор от озера, реки'), ('Начало навигации', 'Начало навигации'), ('Конец навигации', 'Конец навигации'), ('Забор воды выше поста', 'Забор воды выше поста'), ('Забор воды ниже поста', 'Забор воды ниже поста'), ('Забор воды выше поста прекратился', 'Забор воды выше поста прекратился'), ('Забор воды ниже поста прекратился', 'Забор воды ниже поста прекратился'), ('Сброс воды выше поста', 'Сброс воды выше поста'), ('Сброс воды ниже поста', 'Сброс воды ниже поста'), ('Сброс воды выше поста прекратился', 'Сброс воды выше поста прекратился'), ('Сброс воды ниже поста прекратился', 'Сброс воды ниже поста прекратился'), ('Плотина (перемычка, запруда, дамба) выше поста', 'Плотина (перемычка, запруда, дамба) выше поста'), ('Плотина (перемычка, запруда, дамба) ниже поста', 'Плотина (перемычка, запруда, дамба) ниже поста'), ('Разрушена плотина (перемычка, запруда, дамба) выше поста', 'Разрушена плотина (перемычка, запруда, дамба) выше поста'), ('Разрушена плотина (перемычка, запруда, дамба) ниже поста', 'Разрушена плотина (перемычка, запруда, дамба) ниже поста'), ('Подпор от засорения русла', 'Подпор от засорения русла'), ('Подпор от мостовых переправ', 'Подпор от мостовых переправ'), ('Пропуски воды из озера, водохранилищ', 'Пропуски воды из озера, водохранилищ')], max_length=200)),
            ],
            options={
                'db_table': 'water_object_condition',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Discharge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observation_datetime', models.DateTimeField()),
                ('entry_datetime', models.DateTimeField()),
                ('discharge', models.DecimalField(decimal_places=2, max_digits=5)),
            ],
            options={
                'db_table': 'discharge',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Hydrologist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('occupation', models.CharField(choices=[('Наблюдатель', 'Наблюдатель'), ('Инженер', 'Инженер')], default='Наблюдатель', max_length=15)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'hydrologists',
            },
        ),
        migrations.CreateModel(
            name='Hydropost',
            fields=[
                ('code', models.IntegerField(primary_key=True, serialize=False)),
                ('nameEn', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('lat', models.DecimalField(decimal_places=2, max_digits=5)),
                ('lon', models.DecimalField(decimal_places=2, max_digits=5)),
            ],
            options={
                'db_table': 'hydroposts',
            },
        ),
        migrations.CreateModel(
            name='HydropostCategory',
            fields=[
                ('code', models.CharField(max_length=15, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'hydropost_categories',
            },
        ),
        migrations.CreateModel(
            name='IceThickness',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observation_datetime', models.DateTimeField()),
                ('entry_datetime', models.DateTimeField()),
                ('ice_thickness', models.IntegerField()),
            ],
            options={
                'db_table': 'ice_thickness',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observation_datetime', models.DateTimeField()),
                ('entry_datetime', models.DateTimeField()),
                ('level', models.DecimalField(decimal_places=2, max_digits=5)),
                ('pile', models.IntegerField(null=True)),
            ],
            options={
                'db_table': 'level',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hydrologist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hydrology.Hydrologist')),
                ('hydropost', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hydrology.Hydropost')),
            ],
            options={
                'db_table': 'observations',
            },
        ),
        migrations.CreateModel(
            name='Precipitation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observation_datetime', models.DateTimeField()),
                ('entry_datetime', models.DateTimeField()),
                ('precipitation', models.DecimalField(decimal_places=2, max_digits=5)),
                ('precipitation_type', models.CharField(choices=[('жидкие', 'Жидкие осадки'), ('твердые', 'Твердые осадки'), ('смешанные', 'Смешанные осадки')], max_length=31)),
                ('observation', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='hydrology.Observation')),
            ],
            options={
                'db_table': 'precipitation',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('code', models.CharField(max_length=31, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'regions',
            },
        ),
        migrations.CreateModel(
            name='Ripple',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observation_datetime', models.DateTimeField()),
                ('entry_datetime', models.DateTimeField()),
                ('ripple', models.IntegerField()),
                ('observation', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='hydrology.Observation')),
            ],
            options={
                'db_table': 'ripple',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WaterTemperature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observation_datetime', models.DateTimeField()),
                ('entry_datetime', models.DateTimeField()),
                ('water_temperature', models.DecimalField(decimal_places=2, max_digits=5)),
                ('observation', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='hydrology.Observation')),
            ],
            options={
                'db_table': 'water_temperature',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Wind',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('observation_datetime', models.DateTimeField()),
                ('entry_datetime', models.DateTimeField()),
                ('wind_direction', models.CharField(choices=[('штиль', 'штиль'), ('по течению', 'по течению'), ('против течения', 'против течения'), ('с левого берега', 'с левого берега'), ('с правого берега', 'с правого берега')], max_length=17)),
                ('wind_power', models.CharField(choices=[('штиль', 'штиль'), ('слабый', 'слабый'), ('умеренный', 'умеренный'), ('сильный', 'сильный')], max_length=10)),
                ('observation', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='hydrology.Observation')),
            ],
            options={
                'db_table': 'wind',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='level',
            name='observation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='hydrology.Observation'),
        ),
        migrations.AddField(
            model_name='icethickness',
            name='observation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='hydrology.Observation'),
        ),
        migrations.AddField(
            model_name='hydropost',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='hydrology.HydropostCategory'),
        ),
        migrations.AddField(
            model_name='hydropost',
            name='hydrologists',
            field=models.ManyToManyField(through='hydrology.Observation', to='hydrology.Hydrologist'),
        ),
        migrations.AddField(
            model_name='hydropost',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='hydrology.Region'),
        ),
        migrations.AddField(
            model_name='discharge',
            name='observation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='hydrology.Observation'),
        ),
        migrations.AddField(
            model_name='condition',
            name='observation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='hydrology.Observation'),
        ),
        migrations.AddField(
            model_name='comment',
            name='observation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='hydrology.Observation'),
        ),
        migrations.AddField(
            model_name='airtemperature',
            name='observation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='hydrology.Observation'),
        ),
        migrations.AlterUniqueTogether(
            name='wind',
            unique_together={('observation', 'observation_datetime')},
        ),
        migrations.AlterUniqueTogether(
            name='watertemperature',
            unique_together={('observation', 'observation_datetime')},
        ),
        migrations.AlterUniqueTogether(
            name='ripple',
            unique_together={('observation', 'observation_datetime')},
        ),
        migrations.AlterUniqueTogether(
            name='precipitation',
            unique_together={('observation', 'observation_datetime')},
        ),
        migrations.AlterUniqueTogether(
            name='level',
            unique_together={('observation', 'observation_datetime')},
        ),
        migrations.AlterUniqueTogether(
            name='icethickness',
            unique_together={('observation', 'observation_datetime')},
        ),
        migrations.AlterUniqueTogether(
            name='discharge',
            unique_together={('observation', 'observation_datetime')},
        ),
        migrations.AlterUniqueTogether(
            name='comment',
            unique_together={('observation', 'observation_datetime')},
        ),
        migrations.AlterUniqueTogether(
            name='airtemperature',
            unique_together={('observation', 'observation_datetime')},
        ),
    ]
